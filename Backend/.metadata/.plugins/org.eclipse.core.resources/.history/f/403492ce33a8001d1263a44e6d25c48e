package com.abhi.service;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.abhi.Dto.UserDto;
import com.abhi.globalException.UserException;
import com.abhi.model.GenerateEncryptionPassword;
import com.abhi.model.User;
import com.abhi.repository.UserRepo;

@Service
public class UserServiceImpl implements UserService{

	
	@Autowired
	private UserRepo uRepo;
	private GenerateEncryptionPassword gep;
	@Override
	public User registerUser(User user) throws InvalidKeyException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
		     String key = "F21E2A7FB6C68037FAEAA55222E320F7";
		       String password=user.getPassword();

		        byte[] bytekey = gep.hexStringToByteArray(key);
		        SecretKeySpec sks = new SecretKeySpec(bytekey, GenerateEncryptionPassword.AES);
		        Cipher cipher = Cipher.getInstance(GenerateEncryptionPassword.AES);
		        cipher.init(Cipher.ENCRYPT_MODE, sks, cipher.getParameters());
		        byte[] encrypted = cipher.doFinal(password.getBytes());
		        String encryptedpwd = gep.byteArrayToHexString(encrypted);
		      if(user!=null) {
		    	  user.setCity(encryptedpwd);
		        return uRepo.save(user);
		      }else {
		       throw new NoSuchAlgorithmException("No such algorithm exit");
		      }
	}

	@Override
	public UserDto loginUser(String email) throws UserException {
		                User us=uRepo.findByUserEmail(email);
		                if(us!=null) {
		               UserDto udt= new UserDto();
		               udt.setFirstName(us.getFirstName());
		               udt.setLastName(us.getLastName());
		               udt.setUserEmail(us.getUserEmail());
		               udt.setUserMobile(us.getUserMobile());
		               return udt;
		                }else {
		                	throw new UserException("Wrong Credential");
		                }
	}

}
